var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/guide/intro/",title:"简介",description:`olive 是一款强大的直播录制引擎。它会时刻监控着主播的直播状态，并在主播上线时自动开启录制。帮助您捕捉到每一场直播内容。
如果您有新的功能特性要支持或发现了 bug，请去往 issues 板块。如果您有什么问题或想法，请去往 discussions 板块。`,content:`olive 是一款强大的直播录制引擎。它会时刻监控着主播的直播状态，并在主播上线时自动开启录制。帮助您捕捉到每一场直播内容。
如果您有新的功能特性要支持或发现了 bug，请去往 issues 板块。如果您有什么问题或想法，请去往 discussions 板块。
`}),e.add({id:1,href:"/docs/guide/usage/",title:"安装使用",description:`安装部署 # 您可以通过以下 3 种方式中的任意一种来安装 olive：
源码安装
go install github.com/go-olive/olive@latest 二进制安装
docker 镜像
docker pull luxcgo/olive@latest 快速开始 # 只需要传入直播间网址就可以让 olive 开始工作。
olive run -u https://www.huya.com/518512 进阶使用 # 命令行版本 # 通过使用配置文件启动 olive , 该文件为您提供了更多的选项。
模板文件参考: config.toml
olive run -f /path/to/config.toml /path/to/config.toml 指的是config.toml配置文件的绝对路径
docker版本 # docker-compose.yaml 例子如下：
version: \u0026quot;3.8\u0026quot; services: olive: image: luxcgo/olive:latest container_name: olive-run command: [ \u0026quot;./olive\u0026quot;, \u0026quot;run\u0026quot;, \u0026quot;-f\u0026quot;, \u0026quot;/config/config.toml\u0026quot;, ] volumes: - \u0026quot;/etc/timezone:/etc/timezone:ro\u0026quot; - \u0026quot;/etc/localtime:/etc/localtime:ro\u0026quot; - ./downloads:/downloads:Z - ./config:/config:Z 帮助功能 # 如果有任何不懂得命令，都可以执行help命令获得帮助，🌰 如下`,content:`安装部署 # 您可以通过以下 3 种方式中的任意一种来安装 olive：
源码安装
go install github.com/go-olive/olive@latest 二进制安装
docker 镜像
docker pull luxcgo/olive@latest 快速开始 # 只需要传入直播间网址就可以让 olive 开始工作。
olive run -u https://www.huya.com/518512 进阶使用 # 命令行版本 # 通过使用配置文件启动 olive , 该文件为您提供了更多的选项。
模板文件参考: config.toml
olive run -f /path/to/config.toml /path/to/config.toml 指的是config.toml配置文件的绝对路径
docker版本 # docker-compose.yaml 例子如下：
version: \u0026quot;3.8\u0026quot; services: olive: image: luxcgo/olive:latest container_name: olive-run command: [ \u0026quot;./olive\u0026quot;, \u0026quot;run\u0026quot;, \u0026quot;-f\u0026quot;, \u0026quot;/config/config.toml\u0026quot;, ] volumes: - \u0026quot;/etc/timezone:/etc/timezone:ro\u0026quot; - \u0026quot;/etc/localtime:/etc/localtime:ro\u0026quot; - ./downloads:/downloads:Z - ./config:/config:Z 帮助功能 # 如果有任何不懂得命令，都可以执行help命令获得帮助，🌰 如下
olive help olive help run `}),e.add({id:2,href:"/docs/guide/web/",title:"网页端",description:`demo 网站：只作为样例演示，请务必不要修改账号密码
除了以后端服务的方式运行，您还可以部署网页端的服务。
该服务已打包成docker 镜像
# 保存以下内容为本地文件，文件名\`docker-compose.yaml\` # 并执行以下命令 docker-compose up -d olive-db docker-compose up -d olive-server docker-compose up -d olive-portal version: \u0026quot;3.8\u0026quot; services: olive-db: image: postgres:14-alpine container_name: olive-db restart: always ports: - 127.0.0.1:5432:5432 environment: POSTGRES_USER: postgres POSTGRES_PASSWORD: postgres volumes: - ./pgdata:/var/lib/postgresql/data networks: - olive-network olive-server: image: luxcgo/olive:latest container_name: olive-server depends_on: - olive-db ports: - 127.0.0.1:3000:3000 - 127.0.0.1:4000:4000 command: [ \u0026quot;./olive\u0026quot;, \u0026quot;server\u0026quot;, \u0026quot;--db-host\u0026quot;, \u0026quot;olive-db:5432\u0026quot;, \u0026quot;-l\u0026quot;, \u0026quot;/downloads\u0026quot;, \u0026quot;-s\u0026quot;, \u0026quot;/downloads\u0026quot; ] volumes: - \u0026quot;/etc/timezone:/etc/timezone:ro\u0026quot; - \u0026quot;/etc/localtime:/etc/localtime:ro\u0026quot; - .`,content:` demo 网站：只作为样例演示，请务必不要修改账号密码
除了以后端服务的方式运行，您还可以部署网页端的服务。
该服务已打包成docker 镜像
# 保存以下内容为本地文件，文件名\`docker-compose.yaml\` # 并执行以下命令 docker-compose up -d olive-db docker-compose up -d olive-server docker-compose up -d olive-portal version: \u0026quot;3.8\u0026quot; services: olive-db: image: postgres:14-alpine container_name: olive-db restart: always ports: - 127.0.0.1:5432:5432 environment: POSTGRES_USER: postgres POSTGRES_PASSWORD: postgres volumes: - ./pgdata:/var/lib/postgresql/data networks: - olive-network olive-server: image: luxcgo/olive:latest container_name: olive-server depends_on: - olive-db ports: - 127.0.0.1:3000:3000 - 127.0.0.1:4000:4000 command: [ \u0026quot;./olive\u0026quot;, \u0026quot;server\u0026quot;, \u0026quot;--db-host\u0026quot;, \u0026quot;olive-db:5432\u0026quot;, \u0026quot;-l\u0026quot;, \u0026quot;/downloads\u0026quot;, \u0026quot;-s\u0026quot;, \u0026quot;/downloads\u0026quot; ] volumes: - \u0026quot;/etc/timezone:/etc/timezone:ro\u0026quot; - \u0026quot;/etc/localtime:/etc/localtime:ro\u0026quot; - ./downloads:/downloads - ./config:/config networks: - olive-network olive-portal: image: luxcgo/olive-portal:latest container_name: olive-portal depends_on: - olive-server ports: - \u0026quot;8080:8080\u0026quot; volumes: - ./config/default.conf:/etc/nginx/conf.d/default.conf networks: - olive-network networks: olive-network: `}),e.add({id:3,href:"/docs/guide/config/",title:"配置文件",description:`详解 # 最小配置项 # 只需要填写这几个配置项，就可以开始对一个直播间进行录制了。
[[Shows]] # 全局唯一字符串，因为配置修改会实时监控实时更新，故以此 ID 作为标识这一个录制的配置项 ID = 'a' # 平台名称 Platform = \u0026quot;bilibili\u0026quot; # 房间号 RoomID = \u0026quot;21852\u0026quot; # 主播名称 StreamerName = \u0026quot;old-tomato\u0026quot; 定制文件名称 # 新增配置项 OutTmpl
日期: {{ now | date \\\u0026quot;2006-01-02 15-04-05\\\u0026quot;}}
主播名称: {{ .StreamerName }}
直播标题: {{ .RoomName }}
直播平台: {{ .SiteName }}
[[Shows]] ID = 'a' Platform = \u0026quot;bilibili\u0026quot; RoomID = \u0026quot;21852\u0026quot; StreamerName = \u0026quot;old-tomato\u0026quot; # 文件名称将会是 \`[2022-04-24 02-02-32][old-tomato][Hi!]\` OutTmpl = \u0026quot;[{{ now | date \\\u0026quot;2006-01-02 15-04-05\\\u0026quot;}}][{{ .`,content:`详解 # 最小配置项 # 只需要填写这几个配置项，就可以开始对一个直播间进行录制了。
[[Shows]] # 全局唯一字符串，因为配置修改会实时监控实时更新，故以此 ID 作为标识这一个录制的配置项 ID = 'a' # 平台名称 Platform = \u0026quot;bilibili\u0026quot; # 房间号 RoomID = \u0026quot;21852\u0026quot; # 主播名称 StreamerName = \u0026quot;old-tomato\u0026quot; 定制文件名称 # 新增配置项 OutTmpl
日期: {{ now | date \\\u0026quot;2006-01-02 15-04-05\\\u0026quot;}}
主播名称: {{ .StreamerName }}
直播标题: {{ .RoomName }}
直播平台: {{ .SiteName }}
[[Shows]] ID = 'a' Platform = \u0026quot;bilibili\u0026quot; RoomID = \u0026quot;21852\u0026quot; StreamerName = \u0026quot;old-tomato\u0026quot; # 文件名称将会是 \`[2022-04-24 02-02-32][old-tomato][Hi!]\` OutTmpl = \u0026quot;[{{ now | date \\\u0026quot;2006-01-02 15-04-05\\\u0026quot;}}][{{ .StreamerName }}][{{ .RoomName }}]\u0026quot; 定制文件保存位置 # 新增配置项 SaveDir
文件名称中的tmpl变量，如主播名称、直播平台等也可以在这里使用
[[Shows]] Platform = \u0026quot;bilibili\u0026quot; RoomID = \u0026quot;21852\u0026quot; StreamerName = \u0026quot;old-tomato\u0026quot; SaveDir = \u0026quot;/Users/luxcgo/Videos\u0026quot; 定制文件下载器 # 新增配置项 Parser
[[Shows]] Platform = \u0026quot;bilibili\u0026quot; RoomID = \u0026quot;21852\u0026quot; StreamerName = \u0026quot;old-tomato\u0026quot; # 使用 \`ffmpeg\` 作为文件下载器 Parser = \u0026quot;ffmpeg\u0026quot; 参考表
下载器 类型 平台 streamlink 第三方 YouTube/Twitch yt-dlp 第三方 YouTube ffmpeg 第三方 除了 YouTube/Twitch flv 原生 除了 YouTube/Twitch 如果您需要使用这些第三方下载器，请务必手动将它们下载到您的本地环境中。
原生下载器已内置到 olive ，您无需下载就可畅快使用。
录制结束后执行定制化命令 # 增加 Shows.PostCmds 配置项，在任何一个 Shows 的下面都可以自定义的配置多个命令。
在录制结束的时候会自动依次执行，若中途有命令执行失败，则提前退出。
olive 内部提供了几个已经实现好开箱即用的命令（ 在[[Shows]] 的PostCmds中增加 Path 配置项 ）
olivearchive: 将文件移动到当前路径下的 archive 文件夹中。 olivetrash: 将文件删除（不可恢复）。 olivebiliup: 若有配置 CookieFilepath、BiliupEnable，则会根据配置自动上传至哔哩哔哩，若上传失败会执行olivearchive。 oliveshell: 将常规终端指令切分成字符串数组，并配置到 Args 中。 olive 内置了文件路径作为环境变量，并可以通过 \$FILE_PATH 获取。注意环境变量只有在 shell 环境中才会正确解析，如 /bin/zsh -c \u0026quot;echo \$FILE_PATH\u0026quot; ，只执行 echo \$FILE_PATH 则很可能获取不到路径信息。 配置文件样例
[Config] # 开启 biliup BiliupEnable = true # cookies 文件路径 # cookies 文件生成可在命令行执行 \`olive biliup login\` 命令 CookieFilepath = '/Users/lucas/github/olive/cookies.json' Threads = 6 # 每秒最多上传字节数，以下配置是限速 2MB/s MaxBytesPerSecond = 2097152 [[Shows]] ID = 'a' Enable = false Platform = 'bilibili' RoomID = '1319379' StreamerName = 'test1' OutTmpl = '[{{ .StreamerName }}][{{ .RoomName }}][{{ now | date \u0026quot;2006-01-02 15-04-05\u0026quot;}}].flv' Parser = 'flv' SaveDir = '' PostCmds = '[{\u0026quot;Path\u0026quot;:\u0026quot;oliveshell\u0026quot;,\u0026quot;Args\u0026quot;:[\u0026quot;/bin/zsh\u0026quot;,\u0026quot;-c\u0026quot;,\u0026quot;echo \$FILE_PATH\u0026quot;]},{\u0026quot;Path\u0026quot;:\u0026quot;olivebiliup\u0026quot;},{\u0026quot;Path\u0026quot;:\u0026quot;olivetrash\u0026quot;}]' 模拟执行配置文件
录制结束 执行自定义命令/bin/sh -c \u0026quot;echo \$FILE_PATH\u0026quot; 若上条命令执行成功，执行内置命令olivebiliup 若上条命令执行成功，执行内置命令olivetrash 切分文件 # 当以下任意一个条件满足是时， olive 会新创建一个文件用于录制。
最大视频时长: Duration 一个时间段字符串是一个序列，每个片段包含可选的正负号、十进制数、可选的小数部分和单位后缀，如\u0026quot;300ms\u0026quot;、\u0026quot;-1.5h\u0026quot;、\u0026ldquo;2h45m\u0026rdquo;。 合法的单位有\u0026quot;ns\u0026quot;、\u0026ldquo;us\u0026rdquo; /\u0026ldquo;µs\u0026rdquo;、\u0026ldquo;ms\u0026rdquo;、\u0026ldquo;s\u0026rdquo;、\u0026ldquo;m\u0026rdquo;、\u0026ldquo;h\u0026rdquo;。 最大视频大小(字节): Filesize [[Shows]] ID = 'a' Platform = 'bilibili' RoomID = '1319379' SplitRule = '{\u0026quot;FileSize\u0026quot;:2000000000,\u0026quot;Duration\u0026quot;:\u0026quot;1h\u0026quot;}' 直播平台 # 原生 # Platform bilibili douyin huya kuaishou lang tiktok twitch youtube olive 依赖 olivetv 来支持上述网站的直播录制。
如果您的不在上述列表中，欢迎在 discussion 中留下评论或提交 pr 。
streamlink # 更多的一些网站被 streamlink 支持，所以就没有必要重新造轮子了。streamlink 可以作为一个插件在 olive 中使用 。只要网站在 streamlink 中被支持，你也可以在 olive 中使用它。
例子如下：
[[Shows]] Platform = \u0026quot;streamlink\u0026quot; RoomID = \u0026quot;https://twitcasting.tv/c:aiueo033000\u0026quot; StreamerName = \u0026quot;c:aiueo033000\u0026quot; OutTmpl = \u0026quot;[{{ .StreamerName }}][{{ now | date \\\u0026quot;2006-01-02 15-04-05\\\u0026quot;}}]\u0026quot; [[Shows]] Platform = \u0026quot;streamlink\u0026quot; RoomID = \u0026quot;https://live.nicovideo.jp/watch/lv337855989\u0026quot; StreamerName = \u0026quot;ラムミ\u0026quot; OutTmpl = \u0026quot;[{{ .StreamerName }}][{{ now | date \\\u0026quot;2006-01-02 15-04-05\\\u0026quot;}}]\u0026quot; [[Shows]] Platform = \u0026quot;streamlink\u0026quot; RoomID = \u0026quot;https://play.afreecatv.com/030b1004/241795118\u0026quot; StreamerName = \u0026quot;덩이￼\u0026quot; OutTmpl = \u0026quot;[{{ .StreamerName }}][{{ now | date \\\u0026quot;2006-01-02 15-04-05\\\u0026quot;}}]\u0026quot; Config.toml # 一个包含所有特性的配置文件。
[Config] PortalUsername = 'olive' PortalPassword = 'olive' # 日志输出目录 LogDir = '/Users/luxcgo/olive' # 全局 OutTmpl OutTmpl = \u0026quot;[{{ now | date \\\u0026quot;2006-01-02 15-04-05\\\u0026quot;}}][{{ .RoomName }}]\u0026quot; # 全局 SaveDir，绝对路径 SaveDir = \u0026quot;/Users/luxcgo/olive/{{ .SiteName }}/{{ .StreamerName }}/\u0026quot; # 日志等级 (0~6), 越大日志输出越多 LogLevel = 5 # 直播间状态查询间隔时间（秒） SnapRestSeconds = 15 # 文件是否满足切割条件检测间隔时间（秒） SplitRestSeconds = 60 # 直播间录播结束后执行命令的并发执行的个数 CommanderPoolSize = 1 # 解析器工作状态检查间隔时间（秒） ParserMonitorRestSeconds = 10 # 部分网站需要配置 cookie DouyinCookie = \u0026quot;__ac_nonce=06245c89100e7ab2dd536; __ac_signature=_02B4Z6wo00f01LjBMSAAAIDBwA.aJ.c4z1C44TWAAEx696;\u0026quot; KuaishouCookie = \u0026quot;did=web_d86297aa2f579589b8abc2594b0ea985\u0026quot; # biliup 配置项 BiliupEnable = false CookieFilepath = '/Users/lucas/github/olive/cookies.json' Threads = 6 MaxBytesPerSecond = 2097152 [[Shows]] # 全局唯一字符串，因为配置修改会实时监控实时更新，故以此 ID 作为标识这一个录制的配置项 ID = 'a' # 平台名称 Platform = \u0026quot;huya\u0026quot; # 房间号 RoomID = \u0026quot;518512\u0026quot; [[Shows]] ID = 'b' Enable = false Platform = 'bilibili' RoomID = '1319379' StreamerName = 'test1' OutTmpl = '[{{ .StreamerName }}][{{ .RoomName }}][{{ now | date \u0026quot;2006-01-02 15-04-05\u0026quot;}}].flv' Parser = 'flv' SaveDir = '' PostCmds = '[{\u0026quot;Path\u0026quot;:\u0026quot;oliveshell\u0026quot;,\u0026quot;Args\u0026quot;:[\u0026quot;/bin/zsh\u0026quot;,\u0026quot;-c\u0026quot;,\u0026quot;echo \$FILE_PATH\u0026quot;]},{\u0026quot;Path\u0026quot;:\u0026quot;olivebiliup\u0026quot;},{\u0026quot;Path\u0026quot;:\u0026quot;olivetrash\u0026quot;}]' SplitRule = '{\u0026quot;FileSize\u0026quot;:2000000000,\u0026quot;Duration\u0026quot;:\u0026quot;1h\u0026quot;}' `}),e.add({id:4,href:"/docs/guide/",title:"使用指南",description:"用户使用指南",content:""}),e.add({id:5,href:"/docs/guide/history/",title:"更新历史",description:`0.5.0 # 此版本命令和配置文件有不兼容更新
支持 docker, k8s 部署 内置 golang 原生 biliup 模块 支持 web 端部署 配置文件改动实时监控 olivetv 仓库合并到 olive 仓库 docker 版本内置 streamlink zsh yt-dlp 无需冗余安装 0.3.3 # 此版本依然坚挺，可以正常使用`,content:`0.5.0 # 此版本命令和配置文件有不兼容更新
支持 docker, k8s 部署 内置 golang 原生 biliup 模块 支持 web 端部署 配置文件改动实时监控 olivetv 仓库合并到 olive 仓库 docker 版本内置 streamlink zsh yt-dlp 无需冗余安装 0.3.3 # 此版本依然坚挺，可以正常使用
`}),e.add({id:6,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()